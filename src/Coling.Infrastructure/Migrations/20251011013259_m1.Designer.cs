// <auto-generated />
using System;
using Coling.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Coling.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251011013259_m1")]
    partial class m1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Coling.Domain.Entities.AcademicManagement.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Educations", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Coling.Domain.Entities.AcademicManagement.MemberEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("EducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleReceived")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberEducations");
                });

            modelBuilder.Entity("Coling.Domain.Entities.InstitutionManagement.InstitutionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InstitutionTypes");
                });

            modelBuilder.Entity("Coling.Domain.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MembershipCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MembershipCode")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("TitleNumber")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Coling.Domain.Entities.PartyManagement.Party", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Parties", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Coling.Domain.Entities.UsersManagement.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Coling.Domain.Entities.UsersManagement.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Coling.Domain.Entities.WorkManagement.WorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Achievements")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DocumentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Responsibilities")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("MemberId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("Coling.Domain.Entities.WorkManagement.WorkExperienceField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("WorkExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkFieldId");

                    b.HasIndex("WorkExperienceId", "WorkFieldId")
                        .IsUnique();

                    b.ToTable("WorkExperienceFields");
                });

            modelBuilder.Entity("Coling.Domain.Entities.WorkManagement.WorkField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("WorkFieldCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkFieldCategoryId");

                    b.ToTable("WorkFields");
                });

            modelBuilder.Entity("Coling.Domain.Entities.WorkManagement.WorkFieldCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WorkFieldCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Coling.Domain.Entities.AcademicManagement.ContinuingEducation", b =>
                {
                    b.HasBaseType("Coling.Domain.Entities.AcademicManagement.Education");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DurationHours")
                        .HasColumnType("int");

                    b.Property<string>("EducationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IssuesCertificate")
                        .HasColumnType("bit");

                    b.ToTable("ContinuingEducations", (string)null);
                });

            modelBuilder.Entity("Coling.Domain.Entities.AcademicManagement.DegreeEducation", b =>
                {
                    b.HasBaseType("Coling.Domain.Entities.AcademicManagement.Education");

                    b.Property<string>("AcademicDegree")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("GPA")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("HasHonors")
                        .HasColumnType("bit");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ThesisTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToTable("DegreeEducations", (string)null);
                });

            modelBuilder.Entity("Coling.Domain.Entities.AcademicManagement.ProfessionalCertification", b =>
                {
                    b.HasBaseType("Coling.Domain.Entities.AcademicManagement.Education");

                    b.Property<string>("CertificationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequiresRenewal")
                        .HasColumnType("bit");

                    b.ToTable("ProfessionalCertifications", (string)null);
                });

            modelBuilder.Entity("Coling.Domain.Entities.InstitutionManagement.Institution", b =>
                {
                    b.HasBaseType("Coling.Domain.Entities.PartyManagement.Party");

                    b.Property<Guid>("InstitutionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("InstitutionTypeId");

                    b.ToTable("Institutions", (string)null);
                });

            modelBuilder.Entity("Coling.Domain.Entities.Person", b =>
                {
                    b.HasBaseType("Coling.Domain.Entities.PartyManagement.Party");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstNames")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaternalLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PaternalLastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasIndex("NationalId")
                        .IsUnique()
                        .HasFilter("[NationalId] IS NOT NULL");

                    b.ToTable("Persons", (string)null);
                });

            modelBuilder.Entity("Coling.Domain.Entities.AcademicManagement.Education", b =>
                {
                    b.HasOne("Coling.Domain.Entities.InstitutionManagement.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Coling.Domain.Entities.AcademicManagement.MemberEducation", b =>
                {
                    b.HasOne("Coling.Domain.Entities.AcademicManagement.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Coling.Domain.Entities.Member", "Member")
                        .WithMany("Educations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Coling.Domain.Entities.PartialDateManagement.PartialDate", "EndDate", b1 =>
                        {
                            b1.Property<Guid>("MemberEducationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("Day")
                                .HasColumnType("int")
                                .HasColumnName("DayCompleted");

                            b1.Property<int?>("Month")
                                .HasColumnType("int")
                                .HasColumnName("MonthCompleted");

                            b1.Property<int>("Year")
                                .HasColumnType("int")
                                .HasColumnName("YearCompleted");

                            b1.HasKey("MemberEducationId");

                            b1.ToTable("MemberEducations");

                            b1.WithOwner()
                                .HasForeignKey("MemberEducationId");
                        });

                    b.OwnsOne("Coling.Domain.Entities.PartialDateManagement.PartialDate", "StartDate", b1 =>
                        {
                            b1.Property<Guid>("MemberEducationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("Day")
                                .HasColumnType("int")
                                .HasColumnName("DayStarted");

                            b1.Property<int?>("Month")
                                .HasColumnType("int")
                                .HasColumnName("MonthStarted");

                            b1.Property<int>("Year")
                                .HasColumnType("int")
                                .HasColumnName("YearStarted");

                            b1.HasKey("MemberEducationId");

                            b1.ToTable("MemberEducations");

                            b1.WithOwner()
                                .HasForeignKey("MemberEducationId");
                        });

                    b.Navigation("Education");

                    b.Navigation("EndDate");

                    b.Navigation("Member");

                    b.Navigation("StartDate");
                });

            modelBuilder.Entity("Coling.Domain.Entities.Member", b =>
                {
                    b.HasOne("Coling.Domain.Entities.Person", "Person")
                        .WithOne("Member")
                        .HasForeignKey("Coling.Domain.Entities.Member", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Coling.Domain.Entities.UsersManagement.User", b =>
                {
                    b.HasOne("Coling.Domain.Entities.Person", "Person")
                        .WithOne()
                        .HasForeignKey("Coling.Domain.Entities.UsersManagement.User", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Coling.Domain.Entities.WorkManagement.WorkExperience", b =>
                {
                    b.HasOne("Coling.Domain.Entities.InstitutionManagement.Institution", "Institution")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Coling.Domain.Entities.Member", "Member")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Coling.Domain.Entities.PartialDateManagement.PartialDate", "EndDate", b1 =>
                        {
                            b1.Property<Guid>("WorkExperienceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("Day")
                                .HasColumnType("int")
                                .HasColumnName("EndDay");

                            b1.Property<int?>("Month")
                                .HasColumnType("int")
                                .HasColumnName("EndMonth");

                            b1.Property<int>("Year")
                                .HasColumnType("int")
                                .HasColumnName("EndYear");

                            b1.HasKey("WorkExperienceId");

                            b1.ToTable("WorkExperiences");

                            b1.WithOwner()
                                .HasForeignKey("WorkExperienceId");
                        });

                    b.OwnsOne("Coling.Domain.Entities.PartialDateManagement.PartialDate", "StartDate", b1 =>
                        {
                            b1.Property<Guid>("WorkExperienceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("Day")
                                .HasColumnType("int")
                                .HasColumnName("StartDay");

                            b1.Property<int?>("Month")
                                .HasColumnType("int")
                                .HasColumnName("StartMonth");

                            b1.Property<int>("Year")
                                .HasColumnType("int")
                                .HasColumnName("StartYear");

                            b1.HasKey("WorkExperienceId");

                            b1.ToTable("WorkExperiences");

                            b1.WithOwner()
                                .HasForeignKey("WorkExperienceId");
                        });

                    b.Navigation("EndDate");

                    b.Navigation("Institution");

                    b.Navigation("Member");

                    b.Navigation("StartDate")
                        .IsRequired();
                });

            modelBuilder.Entity("Coling.Domain.Entities.WorkManagement.WorkExperienceField", b =>
                {
                    b.HasOne("Coling.Domain.Entities.WorkManagement.WorkExperience", "WorkExperience")
                        .WithMany("WorkExperienceFields")
                        .HasForeignKey("WorkExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coling.Domain.Entities.WorkManagement.WorkField", "WorkField")
                        .WithMany("WorkExperienceFields")
                        .HasForeignKey("WorkFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkExperience");

                    b.Navigation("WorkField");
                });

            modelBuilder.Entity("Coling.Domain.Entities.WorkManagement.WorkField", b =>
                {
                    b.HasOne("Coling.Domain.Entities.WorkManagement.WorkFieldCategory", "WorkFieldCategory")
                        .WithMany("WorkFields")
                        .HasForeignKey("WorkFieldCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkFieldCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Coling.Domain.Entities.UsersManagement.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Coling.Domain.Entities.UsersManagement.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Coling.Domain.Entities.UsersManagement.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Coling.Domain.Entities.UsersManagement.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coling.Domain.Entities.UsersManagement.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Coling.Domain.Entities.UsersManagement.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Coling.Domain.Entities.AcademicManagement.ContinuingEducation", b =>
                {
                    b.HasOne("Coling.Domain.Entities.AcademicManagement.Education", null)
                        .WithOne()
                        .HasForeignKey("Coling.Domain.Entities.AcademicManagement.ContinuingEducation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Coling.Domain.Entities.AcademicManagement.DegreeEducation", b =>
                {
                    b.HasOne("Coling.Domain.Entities.AcademicManagement.Education", null)
                        .WithOne()
                        .HasForeignKey("Coling.Domain.Entities.AcademicManagement.DegreeEducation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Coling.Domain.Entities.AcademicManagement.ProfessionalCertification", b =>
                {
                    b.HasOne("Coling.Domain.Entities.AcademicManagement.Education", null)
                        .WithOne()
                        .HasForeignKey("Coling.Domain.Entities.AcademicManagement.ProfessionalCertification", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Coling.Domain.Entities.InstitutionManagement.Institution", b =>
                {
                    b.HasOne("Coling.Domain.Entities.PartyManagement.Party", null)
                        .WithOne()
                        .HasForeignKey("Coling.Domain.Entities.InstitutionManagement.Institution", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coling.Domain.Entities.InstitutionManagement.InstitutionType", "InstitutionType")
                        .WithMany("Institutions")
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InstitutionType");
                });

            modelBuilder.Entity("Coling.Domain.Entities.Person", b =>
                {
                    b.HasOne("Coling.Domain.Entities.PartyManagement.Party", null)
                        .WithOne()
                        .HasForeignKey("Coling.Domain.Entities.Person", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Coling.Domain.Entities.InstitutionManagement.InstitutionType", b =>
                {
                    b.Navigation("Institutions");
                });

            modelBuilder.Entity("Coling.Domain.Entities.Member", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("Coling.Domain.Entities.WorkManagement.WorkExperience", b =>
                {
                    b.Navigation("WorkExperienceFields");
                });

            modelBuilder.Entity("Coling.Domain.Entities.WorkManagement.WorkField", b =>
                {
                    b.Navigation("WorkExperienceFields");
                });

            modelBuilder.Entity("Coling.Domain.Entities.WorkManagement.WorkFieldCategory", b =>
                {
                    b.Navigation("WorkFields");
                });

            modelBuilder.Entity("Coling.Domain.Entities.InstitutionManagement.Institution", b =>
                {
                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("Coling.Domain.Entities.Person", b =>
                {
                    b.Navigation("Member");
                });
#pragma warning restore 612, 618
        }
    }
}
